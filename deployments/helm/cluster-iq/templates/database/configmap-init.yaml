kind: ConfigMap
apiVersion: v1
metadata:
  name: postgresql-init
  labels:
    {{- include "cluster-iq.labels" . | nindent 4 }}
    {{- include "cluster-iq.componentLabels" "database" | nindent 4 }}
immutable: false
data:
  init.sql: "-- ## Tables definitions ##\n-- Cloud Providers\nCREATE TABLE IF NOT EXISTS providers (\n  name TEXT PRIMARY KEY\n);\n\n-- Default values for Cloud Providers table\nINSERT INTO\n  providers(name)\nVALUES\n  ('AWS'),\n  ('GCP'),\n  ('Azure'),\n  ('UNKNOWN')\n;\n\n\n-- Status\nCREATE TABLE IF NOT EXISTS status (\n  value TEXT PRIMARY KEY\n);\n\n-- Default values for Status table\nINSERT INTO\n  status(value)\nVALUES\n  ('Running'),\n  ('Stopped'),\n  ('Terminated'),\n  ('Unknown')\n;\n\n\n-- Accounts\nCREATE TABLE IF NOT EXISTS accounts (\n  id TEXT,\n  name TEXT PRIMARY KEY,\n  provider TEXT REFERENCES providers(name),\n  total_cost REAL,\n  cluster_count INTEGER,\n  last_scan_timestamp TIMESTAMP WITH TIME ZONE\n);\n\n\n-- Clusters\nCREATE TABLE IF NOT EXISTS clusters (\n  -- id is the result of joining: \"name+infra_id+account\"\n  id TEXT PRIMARY KEY,\n  name TEXT,\n  infra_id TEXT,\n  provider TEXT REFERENCES providers(name),\n  status TEXT REFERENCES status(value),\n  region TEXT,\n  account_name TEXT REFERENCES accounts(name),\n  console_link TEXT,\n  instance_count INTEGER,\n  last_scan_timestamp TIMESTAMP WITH TIME ZONE,\n  creation_timestamp TIMESTAMP WITH TIME ZONE,\n  age INT,\n  owner TEXT,\n  total_cost REAL\n);\n\n\n-- Instances\nCREATE TABLE IF NOT EXISTS instances (\n  id TEXT PRIMARY KEY,\n  name TEXT,\n  provider TEXT REFERENCES providers(name),\n  instance_type TEXT,\n  availability_zone TEXT,\n  status TEXT REFERENCES status(value),\n  cluster_id TEXT REFERENCES clusters(id),\n  last_scan_timestamp TIMESTAMP WITH TIME ZONE,\n  creation_timestamp TIMESTAMP WITH TIME ZONE,\n  age INT,\n  daily_cost REAL,\n  total_cost REAL\n);\n\n\n-- Instances Tags\nCREATE TABLE IF NOT EXISTS tags (\n  key TEXT,\n  value TEXT,\n  instance_id TEXT REFERENCES instances(id),\n  PRIMARY KEY (key, instance_id)\n);\n\n\n-- Instances expenses\nCREATE TABLE IF NOT EXISTS expenses (\n  instance_id TEXT REFERENCES instances(id),\n  date DATE,\n  amount REAL,\n  PRIMARY KEY (instance_id, date)\n);\n\n-- ## Functions ##\n-- Updates the total cost of an instance after a new expense record is inserted\nCREATE OR REPLACE FUNCTION update_instance_total_costs_after_insert()\n  RETURNS TRIGGER\n  LANGUAGE PLPGSQL\n  AS\n$$\nBEGIN\n  UPDATE instances\n  SET total_cost = (SELECT SUM(amount) FROM expenses WHERE instance_id = NEW.instance_id)\n  WHERE id = NEW.instance_id;\n  RETURN NEW;\nEND;\n$$;\n\n-- Updates the total cost of an instance after an expense record is deleted\nCREATE OR REPLACE FUNCTION update_instance_total_costs_after_delete()\n  RETURNS TRIGGER\n  LANGUAGE PLPGSQL\n  AS\n$$\nBEGIN\n  UPDATE instances\n  SET total_cost = (SELECT SUM(amount) FROM expenses WHERE instance_id = OLD.instance_id)\n  WHERE id = OLD.instance_id;\n  RETURN OLD;\nEND;\n$$;\n\n-- Updates the daily cost of an instance after a new expense record is inserted\nCREATE OR REPLACE FUNCTION update_instance_daily_costs_after_insert()\n  RETURNS TRIGGER\n  LANGUAGE PLPGSQL\n  AS\n$$\nBEGIN\n  UPDATE instances\n  SET daily_cost = (SELECT SUM(amount)/count(*) FROM expenses WHERE instance_id = NEW.instance_id)\n  WHERE id = NEW.instance_id;\n  RETURN NEW;\nEND;\n$$;\n\n-- Updates the daily cost of an instance after an expense record is deleted\nCREATE OR REPLACE FUNCTION update_instance_daily_costs_after_delete()\n  RETURNS TRIGGER\n  LANGUAGE PLPGSQL\n  AS\n$$\nBEGIN\n  UPDATE instances\n  SET daily_cost = (SELECT SUM(amount)/count(*) FROM expenses WHERE instance_id = OLD.instance_id)\n  WHERE id = OLD.instance_id;\n  RETURN OLD;\nEND;\n$$;\n\n-- Updates the total cost of a cluster based on its associated instances\nCREATE OR REPLACE FUNCTION update_cluster_total_costs()\n  RETURNS TRIGGER\n  LANGUAGE PLPGSQL\n  AS\n$$\nBEGIN\n  UPDATE clusters\n  SET total_cost = (SELECT SUM(total_cost) FROM instances WHERE cluster_id = NEW.cluster_id)\n  WHERE id = NEW.cluster_id;\n  RETURN NEW;\nEND;\n$$;\n\n-- Updates the total cost of an account based on its associated clusters\nCREATE OR REPLACE FUNCTION update_account_total_costs()\n  RETURNS TRIGGER\n  LANGUAGE PLPGSQL\n  AS\n$$\nBEGIN\n  UPDATE accounts\n  SET total_cost = (SELECT SUM(total_cost) FROM clusters WHERE account_name = NEW.account_name)\n  WHERE name = NEW.account_name;\n  RETURN NEW;\nEND;\n$$;\n\n-- ## Triggers ##\n-- Trigger to update instance total cost after an expense is inserted\nCREATE TRIGGER update_instance_total_cost_after_insert\nAFTER INSERT\nON expenses\nFOR EACH ROW\n  EXECUTE PROCEDURE update_instance_total_costs_after_insert();\n\n-- Trigger to update instance total cost after an expense is updated\nCREATE TRIGGER update_instance_total_cost_after_update\nAFTER UPDATE\nON expenses\nFOR EACH ROW\n  EXECUTE PROCEDURE update_instance_total_costs_after_insert();\n\n-- Trigger to update instance total cost after an expense is deleted\nCREATE TRIGGER update_instance_total_cost_after_delete\nAFTER DELETE\nON expenses\nFOR EACH ROW\n  EXECUTE PROCEDURE update_instance_total_costs_after_delete();\n\n-- Trigger to update instance daily cost after an expense is inserted\nCREATE TRIGGER update_instance_daily_cost_after_insert\nAFTER INSERT\nON expenses\nFOR EACH ROW\n  EXECUTE PROCEDURE update_instance_daily_costs_after_insert();\n\n-- Trigger to update instance daily cost after an expense is updated\nCREATE TRIGGER update_instance_daily_cost_after_update\nAFTER UPDATE\nON expenses\nFOR EACH ROW\n  EXECUTE PROCEDURE update_instance_daily_costs_after_insert();\n\n-- Trigger to update instance daily cost after an expense is deleted\nCREATE TRIGGER update_instance_daily_cost_after_delete\nAFTER DELETE\nON expenses\nFOR EACH ROW\n  EXECUTE PROCEDURE update_instance_daily_costs_after_delete();\n\n-- Trigger to update cluster total cost after an instance is updated\nCREATE TRIGGER update_cluster_total_cost\nAFTER UPDATE\nON instances\nFOR EACH ROW\n  EXECUTE PROCEDURE update_cluster_total_costs();\n\n-- Trigger to update account total cost after a cluster is updated\nCREATE TRIGGER update_account_total_cost\nAFTER UPDATE\nON clusters\nFOR EACH ROW\n  EXECUTE PROCEDURE update_account_total_costs();\n\n-- ## Maintenance Functions ##\n-- Marks instances as 'Terminated' if they haven't been scanned in the last 24 hours\nCREATE OR REPLACE FUNCTION check_terminated_instances()\nRETURNS void AS $$\nBEGIN\n  UPDATE instances\n  SET status = 'Terminated'\n\tWHERE last_scan_timestamp < NOW() - INTERVAL '1 day';\nEND;\n$$ LANGUAGE plpgsql;\n\n-- Marks clusters as 'Terminated' if they haven't been scanned in the last 24 hours\nCREATE OR REPLACE FUNCTION check_terminated_clusters()\nRETURNS void AS $$\nBEGIN\n  UPDATE clusters\n  SET status = 'Terminated'\n\tWHERE last_scan_timestamp < NOW() - INTERVAL '1 day';\nEND;\n$$ LANGUAGE plpgsql;\n"
