// THIS FILE IS AUTOGENERATED. DO NOT EDIT.

package services

import (
	"context"

	"github.com/RHEcosystemAppEng/cluster-iq/internal/inventory"
	"github.com/RHEcosystemAppEng/cluster-iq/internal/repositories"
)

// ExpenseService defines the interface for expense-related business logic.
type ExpenseService interface {
	List(ctx context.Context, options repositories.ListOptions) ([]inventory.Expense, int, error)
	GetByInstanceID(ctx context.Context, instanceID string) ([]inventory.Expense, error)
	Create(ctx context.Context, expenses []inventory.Expense) error
}

var _ ExpenseService = (*expenseServiceImpl)(nil)

type expenseServiceImpl struct {
	repo repositories.ExpenseRepository
	// other dependencies like other services or clients
}

// NewExpenseService creates a new instance of ExpenseService.
func NewExpenseService(repo repositories.ExpenseRepository) ExpenseService {
	return &expenseServiceImpl{
		repo: repo,
	}
}

// List retrieves a paginated list of expenses.
func (s *expenseServiceImpl) List(ctx context.Context, options repositories.ListOptions) ([]inventory.Expense, int, error) {
	return s.repo.ListExpenses(ctx, options)
}

// GetByInstanceID retrieves all expenses associated with a specific instance.
func (s *expenseServiceImpl) GetByInstanceID(ctx context.Context, instanceID string) ([]inventory.Expense, error) {
	return s.repo.GetExpensesByInstance(ctx, instanceID)
}

// Create creates new expense records.
func (s *expenseServiceImpl) Create(ctx context.Context, expenses []inventory.Expense) error {
	return s.repo.WriteExpenses(ctx, expenses)
}
