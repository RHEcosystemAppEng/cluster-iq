// THIS FILE IS AUTOGENERATED. DO NOT EDIT.

package services

import (
	"context"

	"github.com/RHEcosystemAppEng/cluster-iq/internal/actions"
	"github.com/RHEcosystemAppEng/cluster-iq/internal/repositories"
)

// ActionService defines the interface for action-related business logic.
type ActionService interface {
	List(ctx context.Context, options repositories.ListOptions) ([]actions.Action, int, error)
	Get(ctx context.Context, actionID string) (actions.Action, error)
	Create(ctx context.Context, newActions []actions.Action) error
	Enable(ctx context.Context, actionID string) error
	Disable(ctx context.Context, actionID string) error
	Patch(ctx context.Context, newActions []actions.Action) error
	PatchStatus(ctx context.Context, actionID string, status string) error
	Delete(ctx context.Context, actionID string) error
}

var _ ActionService = (*actionServiceImpl)(nil)

type actionServiceImpl struct {
	repo repositories.ActionRepository
}

// NewActionService creates a new instance of ActionService.
func NewActionService(repo repositories.ActionRepository) ActionService {
	return &actionServiceImpl{
		repo: repo,
	}
}

// List retrieves a paginated list of scheduled actions.
func (s *actionServiceImpl) List(ctx context.Context, options repositories.ListOptions) ([]actions.Action, int, error) {
	return s.repo.ListScheduledActions(ctx, options)
}

// Get retrieves a single scheduled action by its ID.
func (s *actionServiceImpl) Get(ctx context.Context, actionID string) (actions.Action, error) {
	return s.repo.GetScheduledActionByID(ctx, actionID)
}

// Create creates new scheduled actions.
func (s *actionServiceImpl) Create(ctx context.Context, newActions []actions.Action) error {
	return s.repo.WriteScheduledActions(ctx, newActions)
}

// Enable enables a scheduled action.
func (s *actionServiceImpl) Enable(ctx context.Context, actionID string) error {
	return s.repo.EnableScheduledAction(ctx, actionID)
}

// Disable disables a scheduled action.
func (s *actionServiceImpl) Disable(ctx context.Context, actionID string) error {
	return s.repo.DisableScheduledAction(ctx, actionID)
}

// Patch updates a scheduled action.
func (s *actionServiceImpl) Patch(ctx context.Context, newActions []actions.Action) error {
	return s.repo.PatchScheduledAction(ctx, newActions)
}

// PatchStatus updates the status of a scheduled action.
func (s *actionServiceImpl) PatchStatus(ctx context.Context, actionID string, status string) error {
	return s.repo.PatchScheduledActionStatus(ctx, actionID, status)
}

// Delete removes a scheduled action by its ID.
func (s *actionServiceImpl) Delete(ctx context.Context, actionID string) error {
	return s.repo.DeleteScheduledAction(ctx, actionID)
}
