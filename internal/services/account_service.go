// THIS FILE IS AUTOGENERATED. DO NOT EDIT.

package services

import (
	"context"

	"github.com/RHEcosystemAppEng/cluster-iq/internal/inventory"
	"github.com/RHEcosystemAppEng/cluster-iq/internal/repositories"
)

// AccountService defines the interface for account-related business logic.
type AccountService interface {
	List(ctx context.Context, options repositories.ListOptions) ([]inventory.Account, int, error)
	GetByName(ctx context.Context, accountName string) (*inventory.Account, error)
	Create(ctx context.Context, accounts []inventory.Account) error
	Delete(ctx context.Context, accountName string) error
}

var _ AccountService = (*accountServiceImpl)(nil)

type accountServiceImpl struct {
	repo repositories.AccountRepository
	// other dependencies like other services or clients
}

// NewAccountService creates a new instance of AccountService.
func NewAccountService(repo repositories.AccountRepository) AccountService {
	return &accountServiceImpl{
		repo: repo,
	}
}

// List retrieves a paginated list of accounts.
func (s *accountServiceImpl) List(ctx context.Context, options repositories.ListOptions) ([]inventory.Account, int, error) {
	return s.repo.ListAccounts(ctx, options)
}

// GetByName retrieves a single account by its name.
// It returns an error if no account or more than one account is found.
func (s *accountServiceImpl) GetByName(ctx context.Context, name string) (*inventory.Account, error) {
	return s.repo.GetAccountByName(ctx, name)
}

// Create creates one or more new accounts.
func (s *accountServiceImpl) Create(ctx context.Context, accounts []inventory.Account) error {
	return s.repo.Create(ctx, accounts)
}

// Delete removes an account by its name.
func (s *accountServiceImpl) Delete(ctx context.Context, accountName string) error {
	return s.repo.DeleteAccount(ctx, accountName)
}
