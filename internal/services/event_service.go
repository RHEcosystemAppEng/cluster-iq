// THIS FILE IS AUTOGENERATED. DO NOT EDIT.

package services

import (
	"context"

	"github.com/RHEcosystemAppEng/cluster-iq/internal/audit"
	"github.com/RHEcosystemAppEng/cluster-iq/internal/repositories"
)

// EventService defines the interface for event-related business logic.
type EventService interface {
	ListSystemEvents(ctx context.Context, options repositories.ListOptions) ([]audit.SystemAuditLogs, int, error)
	ListClusterEvents(ctx context.Context, options repositories.ListOptions) ([]audit.AuditLog, int, error)
	Add(ctx context.Context, event audit.AuditLog) (int64, error)
	UpdateStatus(ctx context.Context, eventID int64, result string) error
}

var _ EventService = (*eventServiceImpl)(nil)

type eventServiceImpl struct {
	repo repositories.EventRepository
}

// NewEventService creates a new instance of EventService.
func NewEventService(repo repositories.EventRepository) EventService {
	return &eventServiceImpl{
		repo: repo,
	}
}

// ListSystemEvents retrieves a paginated list of system-level audit events.
func (s *eventServiceImpl) ListSystemEvents(ctx context.Context, options repositories.ListOptions) ([]audit.SystemAuditLogs, int, error) {
	return s.repo.ListSystemEvents(ctx, options)
}

// ListClusterEvents retrieves a paginated list of cluster-specific audit events.
func (s *eventServiceImpl) ListClusterEvents(ctx context.Context, options repositories.ListOptions) ([]audit.AuditLog, int, error) {
	return s.repo.ListClusterEvents(ctx, options)
}

// Add creates a new audit event.
func (s *eventServiceImpl) Add(ctx context.Context, event audit.AuditLog) (int64, error) {
	return s.repo.AddEvent(ctx, event)
}

// UpdateStatus updates the status of an existing audit event.
func (s *eventServiceImpl) UpdateStatus(ctx context.Context, eventID int64, result string) error {
	return s.repo.UpdateEventStatus(ctx, eventID, result)
}
