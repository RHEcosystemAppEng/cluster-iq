package dto

import (
	"time"

	"github.com/RHEcosystemAppEng/cluster-iq/internal/inventory"
)

// TODO: comments
type ClusterDTORequest struct {
	ClusterID   string                   `json:"clusterID"`         // Cluster's Name
	ClusterName string                   `json:"clusterName"`       // Cluster's Name
	InfraID     string                   `json:"infraID"`           // InfraID is the infrastructure ID generated by openshift-installer during the installation.Cluster (Could be undefined)
	Provider    inventory.CloudProvider  `json:"provider"`          // Infrastructure provider identifier.
	Status      inventory.ResourceStatus `json:"status"`            // Defines the status of the cluster if its infrastructure is running or not or it was removed
	Region      string                   `json:"region"`            // The region of the infrastructure provider in which the cluster is deployed
	AccountID   string                   `json:"accountID"`         // Account ID which this cluster belongs to
	ConsoleLink string                   `json:"consoleLink"`       // Openshift Console URL. Might not be accesible if its protected
	LastScanTS  time.Time                `json:"lastScanTimestamp"` // Last scan timestamp of the cluster
	CreatedAt   time.Time                `json:"creationTimestamp"` // Timestamp when the cluster was created
	Age         int                      `json:"age"`               // Amount of days since the cluster was created
	Owner       string                   `json:"owner"`             // Cluster's owner
}

func (c ClusterDTORequest) ToInventoryCluster() *inventory.Cluster {
	cluster := inventory.NewCluster(
		c.ClusterName,
		c.InfraID,
		c.Provider,
		c.Region,
		c.ConsoleLink,
		c.Owner,
	)

	cluster.LastScanTS = c.LastScanTS
	cluster.CreatedAt = c.CreatedAt
	cluster.Status = c.Status
	cluster.AccountID = 0

	return cluster
}

// TODO: comments
// ClusterDTORequestList represents the API Request containing a list of accounts.
type ClusterDTORequestList struct {
	Clusters []ClusterDTORequest `json:"clusters"` // List of accounts.
}

func (c ClusterDTORequestList) ToInventoryClusterList() *[]inventory.Cluster {
	var clusters []inventory.Cluster

	for _, cluster := range c.Clusters {
		clusters = append(clusters, *cluster.ToInventoryCluster())
	}

	return &clusters
}
